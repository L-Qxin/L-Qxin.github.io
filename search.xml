<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>闭包</title>
      <link href="/2022/10/20/js/bi-bao/"/>
      <url>/2022/10/20/js/bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><ul><li>简单就是定义在一个函数内部的函数，可以使用其他函数的变量。</li><li>闭包是一种保护私有变量的机制，函数执行时形成私有作用域，保护私有变量不受外界影响。</li><li>内部函数可以使用外部函数的参数和变量，函数和变量不会被垃圾回收机制回收。</li></ul><p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p><p>在 <code>JavaScript</code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p><p>下面给出一个简单的例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name 是一个被 init 创建的局部变量</span>    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// displayName() 是内部函数，一个闭包</span>        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用了父函数中声明的变量</span>    <span class="token punctuation">}</span>    <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p><p>优缺点</p><ol><li> 优点：私有变量的存在；长期内存存储；避免全局污染。</li><li> 缺点：内存浪费，常驻内存及其使用不当的无效内存增大内存使用量，导致内存泄漏。</li></ol><h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>任何闭包的使用场景都离不开这两点：</p><ul><li>创建私有变量</li><li>延长变量的生命周期</li></ul><blockquote><p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p></blockquote><p>下面举个例子：</p><p>在页面上添加一些可以调整字号的按钮</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeSizer</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> size12 <span class="token operator">=</span> <span class="token function">makeSizer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> size14 <span class="token operator">=</span> <span class="token function">makeSizer</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> size16 <span class="token operator">=</span> <span class="token function">makeSizer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'size-12'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> size12<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'size-14'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> size14<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'size-16'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> size16<span class="token punctuation">;</span></code></pre><h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 假设我们有一个求长方形面积的函数</span><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果我们碰到的长方形的宽老是10</span><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">const</span> area2 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">const</span> area3 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 我们可以使用闭包柯里化这个计算面积的函数</span><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> height <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width <span class="token operator">*</span> height    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> getTenWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 之后碰到宽度为10的长方形就可以这样计算面积</span><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getTenWidthArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 而且如果遇到宽度偶尔变化也可以轻松复用</span><span class="token keyword">const</span> getTwentyWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h3><p>在<code>JavaScript</code>中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p><p>下面举个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    privateCounter <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    increment<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    decrement<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Counter1 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Counter2 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 0 */</span>Counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 2 */</span>Counter1<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 1 */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter2<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 0 */</span></code></pre><p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p><p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p><p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p><p>原因在于每个对象的创建，方法都会被重新赋值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getMessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MyObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>MyObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getMessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeof 与 instanceof 区别</title>
      <link href="/2022/10/20/js/typeof-yu-instanceof-qu-bie/"/>
      <url>/2022/10/20/js/typeof-yu-instanceof-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、typeof"><a href="#一、typeof" class="headerlink" title="一、typeof"></a>一、typeof</h2><p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型</p><p>用于判断数据类型，返回值有number、string、boolean、function、undefined、object 六个。</p><p>使用方法如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> operand<span class="token keyword">typeof</span><span class="token punctuation">(</span>operand<span class="token punctuation">)</span></code></pre><p><code>operand</code>表示对象或原始值的表达式，其类型将被返回</p><p>举个例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 'number'</span><span class="token keyword">typeof</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">// 'string'</span><span class="token keyword">typeof</span> undefined <span class="token comment" spellcheck="true">// 'undefined'</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 'boolean'</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'symbol'</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 'object'</span><span class="token keyword">typeof</span> console <span class="token comment" spellcheck="true">// 'object'</span><span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log <span class="token comment" spellcheck="true">// 'function'</span></code></pre><p>从上面例子，前6个都是基础数据类型。虽然<code>typeof null</code>为<code>object</code>，但这只是<code>JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null</code>就是引用数据类型，并且<code>null</code>本身也不是对象</p><p>所以，<code>null</code>在 <code>typeof</code>之后返回的是有问题的结果，不能作为判断<code>null</code>的方法。如果你需要在 <code>if</code> 语句中判断是否为 <code>null</code>，直接通过<code>===null</code>来判断就好</p><p>同时，可以发现引用类型数据，用<code>typeof</code>来判断的话，除了<code>function</code>会被识别出来之外，其余的都输出<code>object</code></p><p>如果我们想要判断一个变量是否存在，可以使用<code>typeof</code>：(不能使用<code>if(a)</code>， 若<code>a</code>未声明，则报错)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//变量存在</span><span class="token punctuation">}</span></code></pre><p>在这里我们可以看到typeof判断null、array、object以及函数的实例（new + 函数）时，它返回的都是object。这就导致在判断这些数据类型的时候得不到真实的数据类型。由此引出instanceof</p><h2 id="二、instanceof"><a href="#二、instanceof" class="headerlink" title="二、instanceof"></a>二、instanceof</h2><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p><p>使用如下：</p><pre class=" language-js"><code class="language-js">object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span></code></pre><p><code>object</code>为实例对象，<code>constructor</code>为构造函数</p><p>构造函数通过<code>new</code>可以实例对象，<code>instanceof</code>能判断这个对象是否是之前那个构造函数生成的对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义构建函数</span><span class="token keyword">let</span> Car <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> benz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>benz <span class="token keyword">instanceof</span> <span class="token class-name">Car</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>car <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'xxx'</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>关于<code>instanceof</code>的实现原理，可以参考下面：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span>    <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到相同原型对象，返回true</span>        proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeof</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也就是顺着原型链去找，直到找到相同的原型对象，返回<code>true</code>，否则为<code>false</code></p><h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p><code>typeof</code>与<code>instanceof</code>都是判断数据类型的方法，区别如下：</p><ul><li><code>typeof</code>会返回一个变量的基本类型，<code>instanceof</code>返回的是一个布尔值</li><li><code>instanceof</code> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li><li>而<code>typeof</code> 也存在弊端，它虽然可以判断基础数据类型（<code>null</code> 除外），但是引用数据类型中，除了<code>function</code> 类型以外，其他的也无法判断</li><li>typeof判断所有变量的类型，返回值有number、string、boolean、function、object、undefined。</li><li>typeof对于丰富的对象实例，只能返回object，导致有时候得不到真实的数据类型。</li><li>instanceof用来判断对象，代码形式（obj1 instanceof obj2）（判断obj1是否为obj2的实例），obj2必须为对象，否则会报错。返回的是布尔值。</li><li>instanceof可以对不同的实例对象进行判断，判断方法是根据对象的原型链依次向下查询，如果obj2的原型属性存在于obj1的原型链上，（obj1 instanceof obj2）值为true。</li></ul><p>可以看到，上述两种方法都有弊端，并不能满足所有场景的需求</p><p>如果需要通用检测数据类型，可以采用<code>Object.prototype.toString</code>，调用该方法，统一返回格式<code>“[object Xxx]”</code>的字符串</p><p>如下</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// "[object Object]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 同上结果，加上call也ok</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "[object Number]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "[object String]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "[object Boolean]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "[object Function]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//"[object Null]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"[object Undefined]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/123/g</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//"[object RegExp]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"[object Date]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//"[object Array]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//"[object HTMLDocument]"</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//"[object Window]"</span></code></pre><p>了解了<code>toString</code>的基本用法，下面就实现一个全局通用的数据类型判断方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> type  <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先进行typeof判断，如果是基础数据类型，直接返回</span>    <span class="token keyword">return</span> type<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\[object (\S+)\]$/</span><span class="token punctuation">,</span> <span class="token string">'$1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>使用如下</p><pre class=" language-js"><code class="language-js"><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// "Array" typeof []是object，因此toString返回</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "string" typeof 直接返回</span><span class="token function">getType</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "Window" toString返回</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "Null"首字母大写，typeof null是object，需toString来判断</span><span class="token function">getType</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "undefined" typeof 直接返回</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// "undefined" typeof 直接返回</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "function" typeof能判断，因此首字母小写</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token regex">/123/g</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//"RegExp" toString返回</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的数据类型</title>
      <link href="/2022/10/20/js/javascript-zhong-de-shu-ju-lei-xing/"/>
      <url>/2022/10/20/js/javascript-zhong-de-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>在<code>JavaScript</code>中，我们可以分成两种类型：</p><ul><li>基本类型</li><li>复杂类型</li></ul><p>两种类型的区别是：存储位置不同</p><h2 id="一、基本类型"><a href="#一、基本类型" class="headerlink" title="一、基本类型"></a>一、基本类型</h2><p>基本类型主要为以下6种：</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>null</li><li>symbol</li></ul><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x开头）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> intNum <span class="token operator">=</span> <span class="token number">55</span> <span class="token comment" spellcheck="true">// 10进制的55</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">070</span> <span class="token comment" spellcheck="true">// 8进制的56</span><span class="token keyword">let</span> hexNum1 <span class="token operator">=</span> <span class="token number">0xA</span> <span class="token comment" spellcheck="true">//16进制的10</span></code></pre><p>浮点类型则在数值汇总必须包含小数点，还可通过科学计数法表示</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> floatNum1 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token keyword">let</span> floatNum2 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token keyword">let</span> floatNum3 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有效，但不推荐</span><span class="token keyword">let</span> floatNum <span class="token operator">=</span> <span class="token number">3.125e7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等于 31250000</span></code></pre><p>在数值类型中，存在一个特殊数值<code>NaN</code>，意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误）</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span></code></pre><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p><code>Undefined</code> 类型只有一个值，就是特殊值 <code>undefined</code>。当使用 <code>var</code>或 <code>let</code>声明了变量但没有初始化时，就相当于给变量赋予了 <code>undefined</code>值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>包含<code>undefined</code> 值的变量跟未定义变量是有区别的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个变量被声明了，只是值为 undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有声明过这个变量，报错</span></code></pre><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串可以使用双引号（”）、单引号（’）或反引号（`）标示</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">'Jacob'</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Jingleheimerschmidt`</span></span></code></pre><p>字符串是不可变的，意思是一旦创建，它们的值就不能变了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> lang <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span>lang <span class="token operator">=</span> lang <span class="token operator">+</span> <span class="token string">"Script"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 先销毁再创建</span></code></pre><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p><code>Null</code>类型同样只有一个值，即特殊值 <code>null</code></p><p>逻辑上讲， null 值表示一个空对象指针，这也是给<code>typeof</code>传一个 <code>null</code> 会返回 <code>"object"</code> 的原因</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span></code></pre><p><code>undefined</code> 值是由 <code>null</code>值派生而来</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>只要变量要保存对象，而当时又没有那个对象可保存，就可用 <code>null</code>来填充该变量</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p><code>Boolean</code>（布尔值）类型有两个字面值： <code>true</code> 和<code>false</code></p><p>通过<code>Boolean</code>可以将其他类型的数据转化成布尔值</p><p>规则如下：</p><pre class=" language-js"><code class="language-js">数据类型                      转换为 <span class="token boolean">true</span> 的值                      转换为 <span class="token boolean">false</span> 的值 String                         非空字符串                              <span class="token string">""</span>  Number                 非零数值（包括无穷值）                        <span class="token number">0</span> 、 <span class="token number">NaN</span>  Object                      任意对象                                <span class="token keyword">null</span>Undefined                     N<span class="token operator">/</span>A （不存在）                         undefined</code></pre><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> genericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> otherGenericSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>genericSymbol <span class="token operator">==</span> otherGenericSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> fooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> otherFooSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooSymbol <span class="token operator">==</span> otherFooSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h2><p>复杂类型统称为<code>Object</code>，我们这里主要讲述下面三种：</p><ul><li>Object</li><li>Array</li><li>Function</li></ul><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>创建<code>object</code>常用方式为对象字面量表示法，属性名可以是字符串或数值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">29</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>JavaScript</code>数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数实际上是对象，每个函数都是 <code>Function</code>类型的实例，而 <code>Function</code>也有属性和方法，跟其他引用类型一样</p><p>函数存在三种常见的表达方式：</p><ul><li>函数声明</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">function</span> sum <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>函数表达式</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>箭头函数</li></ul><p>函数声明和函数表达式两种方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="其他引用类型"><a href="#其他引用类型" class="headerlink" title="其他引用类型"></a>其他引用类型</h3><p>除了上述说的三种之外，还包括<code>Date</code>、<code>RegExp</code>、<code>Map</code>、<code>Set</code>等……</p><h2 id="三、存储区别"><a href="#三、存储区别" class="headerlink" title="三、存储区别"></a>三、存储区别</h2><p>基本数据类型和引用数据类型存储在内存中的位置不同：</p><ul><li>基本数据类型存储在栈中</li><li>引用类型的对象存储于堆中</li></ul><p>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值</p><p>下面来举个例子</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值操作</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10值</span></code></pre><p><code>a</code>的值为一个基本类型，是存储在栈中，将<code>a</code>的值赋给<code>b</code>，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址</p><p>下图演示了基本类型赋值的过程：</p><p><img src="https://static.vue-js.com/906ffb90-6463-11eb-85f6-6fac77c0c9b3.png" alt="基本类型赋值过程"></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Xxx"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// xxx</span></code></pre><p>引用类型数据存放在堆中，每个堆内存对象都有对应的引用地址指向它，引用地址存放在栈中。</p><p><code>obj1</code>是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了<code>obj2</code>，实际上他们共同指向了同一个堆内存对象，所以更改<code>obj2</code>会对<code>obj1</code>产生影响</p><p>下图演示这个引用类型赋值过程</p><p><img src="https://static.vue-js.com/a34bdd10-6463-11eb-ab90-d9ae814b240d.png" alt="引用类型赋值过程"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>声明变量时不同的内存地址分配：<ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul></li><li>不同的类型数据导致赋值变量时的不同：<ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS提高性能的方法</title>
      <link href="/2022/10/20/css/css-ti-gao-xing-neng-de-fang-fa/"/>
      <url>/2022/10/20/css/css-ti-gao-xing-neng-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS提高性能的方法："><a href="#CSS提高性能的方法：" class="headerlink" title="CSS提高性能的方法："></a>CSS提高性能的方法：</h2><p>1、压缩css，减少文件体积；</p><p>2、使用link引入css文件；</p><p>3、合理设计CSS布局，注意复用样式，减少渲染上花的时间；</p><p>4、少用“*”选择器；</p><p>5、慎用浮动、定位等高性能属性；</p><p>6、尽量减少页面重排、重绘；</p><p>7、属性值为0时，不加单位等等。</p><h2 id="CSS优化主要是4个方面："><a href="#CSS优化主要是4个方面：" class="headerlink" title="CSS优化主要是4个方面："></a><strong>CSS优化主要是4个方面：</strong></h2><ul><li><p>加载性能</p><p>主要是从减少文件体积，减少阻塞加载，提高并发方面入手</p></li><li><p>选择器性能</p></li><li><p>渲染性能</p></li><li><p>可维护性、健壮性</p></li></ul><p>下面给大家具体介绍一下。</p><h3 id="加载性能："><a href="#加载性能：" class="headerlink" title="加载性能："></a><strong>加载性能：</strong></h3><p>1、css压缩：将写好的css进行打包压缩，可以减少很多的体积；</p><p>2、css单一样式：当需要下边距和左边距的时候，</p><p>很多时候选择：<code>margin: top 0 bottom 0;</code></p><p>但 <code>margin-bottom: bottom;margin-left: left;</code>执行的效率更高；</p><p>3、减少使用 @import, 而建议使用link, 因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载；</p><p>4、合理设计CSS 布局，注意复用样式，减少渲染上花的时间。class和ID的选择，少用*这种全局匹配，合理设置基本样式（如设置table{}）提高复用。</p><h3 id="选择器性能："><a href="#选择器性能：" class="headerlink" title="选择器性能："></a><strong>选择器性能：</strong></h3><p>CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</p><h4 id="避免使用通配规则"><a href="#避免使用通配规则" class="headerlink" title="*避免使用通配规则*"></a><em><strong>*避免使用通配规则</strong></em>*</h4><p>如*{} 计算次数惊人！只对需要用到的元素进行选择</p><h4 id="尽量少的去对标签进行选择，而是用class"><a href="#尽量少的去对标签进行选择，而是用class" class="headerlink" title="*尽量少的去对标签进行选择，而是用class*"></a><em><strong>*尽量少的去对标签进行选择，而是用class</strong></em>*</h4><p>如：#nav li{},可以为li加上nav_item的类名，如下选择.nav_item{}</p><h4 id="不要去用标签限定ID或者类选择符"><a href="#不要去用标签限定ID或者类选择符" class="headerlink" title="*不要去用标签限定ID或者类选择符*"></a><em><strong>*不要去用标签限定ID或者类选择符</strong></em>*</h4><p>如：ul#nav,应该简化为#nav</p><h4 id="尽量少的去使用后代选择器，降低选择器的权重值"><a href="#尽量少的去使用后代选择器，降低选择器的权重值" class="headerlink" title="*尽量少的去使用后代选择器，降低选择器的权重值*"></a><em><strong>*尽量少的去使用后代选择器，降低选择器的权重值</strong></em>*</h4><p>后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素</p><h4 id="考虑继承"><a href="#考虑继承" class="headerlink" title="*考虑继承*"></a><em><strong>*考虑继承</strong></em>*</h4><p>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则</p><h3 id="渲染性能："><a href="#渲染性能：" class="headerlink" title="渲染性能："></a><strong>渲染性能：</strong></h3><p>1、慎重使用高性能属性：浮动、定位；</p><p>2、尽量减少页面重排、重绘；</p><p>重排按照css的书写顺序：</p><ul><li>位置：positon、top、left、z-index、float、dispay</li><li>大小：width、height、margin、padding</li><li>文字系列： font、line-height、color、letter-spacing</li><li>背景边框：background、 border</li><li>其它：anmation、transition</li><li>重绘：border、outline、background、box-shadow，能使用background-color，就尽量不要使用background;</li></ul><p>3、去除空规则：｛｝；</p><p>4、属性值为0时，不加单位；</p><p>5、属性值为浮动小数0.**，可以省略小数点之前的0；</p><p>6、标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后；</p><p>7、不使用@import前缀，它会影响css的加载速度；</p><p>8、充分利用css继承属性，减少代码量；</p><p>9、抽象提取公共样式，减少代码量；</p><p>10、选择器优化嵌套，尽量避免层级过深；</p><p>11、css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用;</p><p>12、将css文件放在页面最上面</p><h3 id="可维护性、健壮性："><a href="#可维护性、健壮性：" class="headerlink" title="可维护性、健壮性："></a><strong>可维护性、健壮性：</strong></h3><p>1、将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用,提高css的可维护性；</p><p>2、继上一条，oocss也是提高css性能的途径之一，通过定义可复用的、语义化良好的基础类，然后添加到html中，这也是很多ui框架都在使用的一种方法，例如：class=”btn btn-active btn-blue”；</p><p>3、样式与内容分离：讲css代码定义到外部css中；</p><p>4、容器与样式分离；</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式设计</title>
      <link href="/2022/10/19/html/xiang-ying-shi-she-ji/"/>
      <url>/2022/10/19/html/xiang-ying-shi-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p><p>描述响应式界面最著名的一句话就是“Content is like water”</p><p>大白话便是“如果将屏幕看作容器，那么内容就像水一样”</p><p>响应式网站常见特点：</p><ul><li>同时适配PC + 平板 + 手机等</li><li>标签导航在接近手持终端设备时改变为经典的抽屉式导航</li><li>网站的布局会根据视口来调整模块的大小和位置</li></ul><p><img src="https://static.vue-js.com/ae68be30-9dba-11eb-85f6-6fac77c0c9b3.png" alt="img"></p><h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有<code>meta</code>声明<code>viewport</code></p><pre class=" language-html"><code class="language-html">&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”></code></pre><p>属性对应如下：</p><ul><li>width=device-width: 是自适应手机屏幕的尺寸宽度</li><li>maximum-scale:是缩放比例的最大值</li><li>inital-scale:是缩放的初始化</li><li>user-scalable:是用户的可以缩放的操作</li></ul><p>实现响应式布局的方式有如下：</p><ul><li>媒体查询</li><li>百分比</li><li>vw/vh</li><li>rem</li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><code>CSS3</code>中的增加了更多的媒体查询，就像<code>if</code>条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表</p><p>使用<code>@Media</code>查询，可以针对不同的媒体类型定义不同的样式，如：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1920px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span></code></pre><p>当视口在375px - 600px之间，设置特定字体大小18px</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片</p><p>比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现</p><h3 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h3><p>通过百分比单位 “ % “ 来实现响应式的效果</p><p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果</p><p><code>height</code>、<code>width</code>属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素：</p><ul><li>子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度</li><li>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</li><li>子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width</li><li>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度</li></ul><p>可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式</p><h3 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h3><p><code>vw</code>表示相对于视图窗口的宽度，<code>vh</code>表示相对于视图窗口高度。 任意层级元素，在使用<code>vw</code>单位的情况下，<code>1vw</code>都等于视图宽度的百分之一</p><p>与百分比布局很相似，在以前文章提过与<code>%</code>的区别，这里就不再展开述说</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>在以前也讲到，<code>rem</code>是相对于根元素<code>html</code>的<code>font-size</code>属性，默认情况下浏览器字体大小为<code>16px</code>，此时<code>1rem = 16px</code></p><p>可以利用前面提到的媒体查询，针对不同设备分辨率改变<code>font-size</code>的值，如下：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了更准确监听设备可视窗口变化，我们可以在<code>css</code>之前插入<code>script</code>标签，内容如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">//动态为根元素设置字体大小function init () </span><span class="token punctuation">{</span>    // 获取屏幕宽度    var width = document<span class="token number">.</span>documentElement<span class="token number">.</span>clientWidth    // 设置根元素字体大小。此时为宽的<span class="token number">10</span>等分    document<span class="token number">.</span>documentElement<span class="token number">.</span>style<span class="token number">.</span>fontSize = width / <span class="token number">10</span> + <span class="token string">'px'</span><span class="token punctuation">}</span>//首次加载应用，设置一次<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>// 监听手机旋转的事件的时机，重新设置window<span class="token number">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'orientationchange'</span>, init<span class="token punctuation">)</span>// 监听手机窗口变化，重新设置window<span class="token number">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span>, init<span class="token punctuation">)</span></code></pre><p>无论设备可视窗口如何变化，始终设置<code>rem</code>为<code>width</code>的1/10，实现了百分比布局</p><p>除此之外，我们还可以利用主流<code>UI</code>框架，如：<code>element ui</code>、<code>antd</code>提供的栅格布局实现响应式</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>响应式设计实现通常会从以下几方面思考：</p><ul><li>弹性盒子（包括图片、表格、视频）和媒体查询等技术</li><li>使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围</li><li>使用相对单位使得内容自适应调节</li><li>选择断点，针对不同断点实现不同布局和内容展示</li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>响应式布局优点可以看到：</p><ul><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ul><p>缺点：</p><ul><li>仅适用布局、信息、框架并不复杂的部门类型网站</li><li>兼容各种设备工作量大，效率低下</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回流、重绘</title>
      <link href="/2022/10/19/css/hui-liu-chong-hui/"/>
      <url>/2022/10/19/css/hui-liu-chong-hui/</url>
      
        <content type="html"><![CDATA[<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>在<code>HTML</code>中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘：</p><ul><li>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</li><li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li></ul><p>具体的浏览器解析渲染机制如下所示：</p><p><img src="https://static.vue-js.com/2b56a950-9cdc-11eb-ab90-d9ae814b240d.png" alt="img"></p><ul><li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上</li></ul><p>在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变</p><p>当我们对 <code>DOM</code> 的修改引发了 <code>DOM</code>几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来</p><p>当我们对 <code>DOM</code>的修改导致了样式的变化（<code>color</code>或<code>background-color</code>），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了重绘</p><h2 id="二、如何触发"><a href="#二、如何触发" class="headerlink" title="二、如何触发"></a>二、如何触发</h2><p>要想减少回流和重绘的次数，首先要了解回流和重绘是如何触发的</p><h3 id="回流触发时机"><a href="#回流触发时机" class="headerlink" title="回流触发时机"></a>回流触发时机</h3><p>回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况：</p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面一开始渲染的时候（这避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><p>还有一些容易被忽略的操作：获取一些特定属性的值</p><blockquote><p>offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</p></blockquote><p>这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流</p><p>除此还包括<code>getComputedStyle</code>方法，原理是一样的</p><h3 id="重绘触发时机"><a href="#重绘触发时机" class="headerlink" title="重绘触发时机"></a>重绘触发时机</h3><p>触发回流一定会触发重绘</p><p>可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）</p><p>除此之外还有一些其他引起重绘行为：</p><ul><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul><h3 id="浏览器优化机制"><a href="#浏览器优化机制" class="headerlink" title="浏览器优化机制"></a>浏览器优化机制</h3><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列</p><p>当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的<code>offsetTop</code>等方法都会返回最新的数据</p><p>因此浏览器不得不清空队列，触发回流重绘来返回正确的值</p><h2 id="三、如何减少"><a href="#三、如何减少" class="headerlink" title="三、如何减少"></a>三、如何减少</h2><p>我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验：</p><ul><li>如果想设定元素的样式，通过改变元素的 <code>class</code> 类名 (尽可能在 DOM 树的最里层)</li><li>避免设置多项内联样式</li><li>应用元素的动画，使用 <code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code> 值(如前文示例所提)</li><li>避免使用 <code>table</code> 布局，<code>table</code> 中每个元素的大小以及内容的改动，都会导致整个 <code>table</code> 的重新计算</li><li>对于那些复杂的动画，对其设置 <code>position: fixed/absolute</code>，尽可能地使元素脱离文档流，从而减少对其他元素的影响</li><li>使用css3硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘</li><li>避免使用 CSS 的 <code>JavaScript</code> 表达式</li></ul><p>在使用 <code>JavaScript</code> 动态插入多个节点时, 可以使用<code>DocumentFragment</code>. 创建后一次插入. 就能避免多次的渲染性能</p><p>但有时候，我们会无可避免地进行回流或者重绘，我们可以更好使用它们</p><p>例如，多次修改一个把元素布局的时候，我们很可能会如下操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top  <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetTop  <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>每次循环都需要获取多次<code>offset</code>属性，比较糟糕，可以使用变量的形式缓存起来，待计算完毕再提交给浏览器发出重计算请求</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 缓存offsetLeft与offsetTop的值</span><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'el'</span><span class="token punctuation">)</span><span class="token keyword">let</span> offLeft <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">,</span> offTop <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetTop<span class="token comment" spellcheck="true">// 在JS层面进行计算</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  offLeft <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span>  offTop  <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一次性将计算结果应用到DOM上</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> offLeft <span class="token operator">+</span> <span class="token string">"px"</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> offTop  <span class="token operator">+</span> <span class="token string">"px"</span></code></pre><p>我们还可避免改变样式，使用类名去合并样式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'200px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'10px solid red'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><p>使用类名去合并样式</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>basic_style <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        border<span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>        color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>    container<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'basic_style'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>前者每次单独操作，都去触发一次渲染树更改（新浏览器不会），</p><p>都去触发一次渲染树更改，从而导致相应的回流与重绘过程</p><p>合并之后，等于我们将所有的更改一次性发出</p><p>我们还可以通过通过设置元素属性<code>display: none</code>，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘，这个过程称为离线操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'200px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'10px solid red'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><p>离线操作后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'200px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'10px solid red'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token operator">...</span>（省略了许多类似的后续操作）container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素水平垂直居中的方法</title>
      <link href="/2022/10/19/css/yuan-su-shui-ping-chui-zhi-ju-zhong-de-fang-fa/"/>
      <url>/2022/10/19/css/yuan-su-shui-ping-chui-zhi-ju-zhong-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="实现元素水平垂直居中的方式："><a href="#实现元素水平垂直居中的方式：" class="headerlink" title="实现元素水平垂直居中的方式："></a>实现元素水平垂直居中的方式：</h2><ul><li>利用定位+margin:auto</li><li>利用定位+margin:负值</li><li>利用定位+transform</li><li>table布局</li><li>flex布局</li><li>grid布局</li></ul><h3 id="利用定位-margin-auto"><a href="#利用定位-margin-auto" class="headerlink" title="利用定位+margin:auto"></a>利用定位+margin:auto</h3><p>先上代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#0a3b98</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.son</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f0a238</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>父级设置为相对定位，子级绝对定位 ，并且四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高</p><p>这里子元素设置了宽高，所以宽高会按照我们的设置来显示，但是实际上子级的虚拟占位已经撑满了整个父级，这时候再给它一个<code>margin：auto</code>它就可以上下左右都居中了</p><h3 id="利用定位-margin-负值"><a href="#利用定位-margin-负值" class="headerlink" title="利用定位+margin:负值"></a>利用定位+margin:负值</h3><p>绝大多数情况下，设置父元素为相对定位， 子元素移动自身50%实现水平垂直居中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span>-<span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span>-<span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>整个实现思路如下图所示：</p><p><img src="https://static.vue-js.com/922dc300-95f9-11eb-ab90-d9ae814b240d.png" alt="img"></p><ul><li>初始位置为方块1的位置</li><li>当设置left、top为50%的时候，内部子元素为方块2的位置</li><li>设置margin为负数时，使内部子元素到方块3的位置，即中间位置</li></ul><p>这种方案不要求父元素的高度，也就是即使父元素的高度变化了，仍然可以保持在父元素的垂直居中位置，水平方向上是一样的操作</p><p>但是该方案需要知道子元素自身的宽高，但是我们可以通过下面<code>transform</code>属性进行移动</p><h3 id="利用定位-transform"><a href="#利用定位-transform" class="headerlink" title="利用定位+transform"></a>利用定位+transform</h3><p>实现代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>translate(-50%, -50%)</code>将会将元素位移自己宽度和高度的-50%</p><p>这种方法其实和最上面被否定掉的margin负值用法一样，可以说是<code>margin</code>负值的替代方案，并不需要知道自身元素的宽高</p><h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><p>设置父元素为<code>display:table-cell</code>，子元素设置 <code>display: inline-block</code>。利用<code>vertical</code>和<code>text-align</code>可以让所有的行内块级元素水平垂直居中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><p>还是看看实现的整体代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>css3</code>中了<code>flex</code>布局，可以非常简单实现垂直水平居中</p><p>这里可以简单看看<code>flex</code>布局的关键属性作用：</p><ul><li>display: flex时，表示该容器内部的元素将按照flex进行布局</li><li>align-items: center表示这些元素将相对于本容器水平居中</li><li>justify-content: center也是同样的道理垂直居中</li></ul><h3 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.son</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这里看到，<code>gird</code>网格布局和<code>flex</code>弹性布局都简单粗暴</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>上述方法中，不知道元素宽高大小仍能实现水平垂直居中的方法有：</p><ul><li>利用定位+margin:auto</li><li>利用定位+transform</li><li>flex布局</li><li>grid布局</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据元素标签的性质，可以分为：</p><ul><li>内联元素居中布局</li><li>块级元素居中布局</li></ul><h3 id="内联元素居中布局"><a href="#内联元素居中布局" class="headerlink" title="内联元素居中布局"></a>内联元素居中布局</h3><p>水平居中</p><ul><li>行内元素可设置：text-align: center</li><li>flex布局设置父元素：display: flex; justify-content: center</li></ul><p>垂直居中</p><ul><li>单行文本父元素确认高度：height === line-height</li><li>多行文本父元素确认高度：display: table-cell; vertical-align: middle</li></ul><h3 id="块级元素居中布局"><a href="#块级元素居中布局" class="headerlink" title="块级元素居中布局"></a>块级元素居中布局</h3><p>水平居中</p><ul><li>定宽: margin: 0 auto</li><li>绝对定位+left:50%+margin:负自身一半</li></ul><p>垂直居中</p><ul><li>position: absolute设置left、top、margin-left、margin-top(定高)</li><li>display: table-cell</li><li>transform: translate(x, y)</li><li>flex(不定高，不定宽)</li><li>grid(不定高，不定宽)，兼容性相对比较差</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css选择器</title>
      <link href="/2022/10/19/css/css-xuan-ze-qi/"/>
      <url>/2022/10/19/css/css-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、选择器"><a href="#一、选择器" class="headerlink" title="一、选择器"></a>一、选择器</h2><p>CSS选择器是CSS规则的第一部分</p><p>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式</p><p>选择器所选择的元素，叫做“选择器的对象”</p><ul><li>id选择器（#box），选择id为box的元素</li><li>类选择器（.one），选择类名为one的所有元素</li><li>标签选择器（div），选择标签为div的所有元素</li><li>后代选择器（#box div），选择id为box元素内部所有的div元素</li><li>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</li><li>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</li><li>群组选择器（div,p），选择div、p的所有元素</li><li>通配选择器（*）</li></ul><p>还有一些使用频率相对没那么多的选择器：</p><ul><li><p>伪类选择器</p><p>伪类：不存在的类，表示元素的一种状态</p><p>1.常用的伪类</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-child   第一个子元素<span class="token punctuation">:</span>last-child    最后一个子元素<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   选中第n个元素<span class="token punctuation">:</span>focus   选择具有焦点的</code></pre><p>关于:nth-child()的特殊值</p><p>​    n   第n个   n的范围0到正无穷（全选）</p><p>​    even或2n    选中偶数位的元素</p><p>​    odd或2n+1   选中奇数位得到元素</p><p>上面的都是在所有元素中选择</p><p>下面都是在相同元素中选择</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-of-type  第一个子元素<span class="token punctuation">:</span>last-of-type   最后一个子元素<span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    选中第n个元素</code></pre><p>2、否定伪类</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        将符号条件的元素去除</code></pre><p>3、元素的伪类</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>link        表示未访问过的a标签<span class="token punctuation">:</span>visited    表示访问过的a标签</code></pre><p>以上两个伪类是超链接所独有的<br>由于隐私的问题，所以visited这个伪类只能修改链接的颜色</p><p>以下两个伪类是所有标签都可以使用</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>hover        鼠标移入后元素的状态<span class="token punctuation">:</span>active        鼠标点击后，元素的状态 </code></pre></li></ul><ul><li><p>伪元素选择器</p><p>同伪类一样，伪元素也是不存在的元素，表示元素的特殊状态</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-letter ：用于选取指定选择器的首字母<span class="token punctuation">:</span>first-line ：选取指定选择器的首行<span class="token punctuation">:</span><span class="token property">before</span> <span class="token punctuation">:</span> 选择器在被选元素的内容前面插入内容<span class="token punctuation">:</span><span class="token property">after</span> <span class="token punctuation">:</span> 选择器在被选元素的内容后面插入内容<span class="token punctuation">:</span><span class="token punctuation">:</span>selection     表示选中的元素</code></pre><ul><li>属性选择器</li></ul><pre class=" language-css"><code class="language-css">[attribute] 选择带有attribute属性的元素[attribute=value] 选择所有使用attribute=value的元素[attribute~=value] 选择attribute属性包含value的元素[attribute|=value]：选择attribute属性以value开头的元素[属性]    选中含有指定属性的元素[属性=属性值]    选中含有指定属性和指定属性值的元素[属性^=属性值]    选中含有指定属性和指定属性值开头的元素[属性$=属性值]    选中含有指定属性和指定属性值结尾的元素[属性*=属性值]    选中指定属性名和含有指定属性值的元素</code></pre><p>在<code>CSS3</code>中新增的选择器有如下：</p><ul><li>层次选择器（p~ul），选择前面有p元素的每个ul元素</li><li>伪类选择器</li></ul><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>first-of-type 表示一组同级元素中其类型的第一个元素<span class="token punctuation">:</span>last-of-type 表示一组同级元素中其类型的最后一个元素<span class="token punctuation">:</span>only-of-type 表示没有同类型兄弟元素的元素<span class="token punctuation">:</span>only-child 表示没有任何兄弟的元素<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 根据元素在一组同级中的位置匹配元素<span class="token punctuation">:</span><span class="token function">nth-last-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数<span class="token punctuation">:</span>last-child 表示一组兄弟元素中的最后一个元素<span class="token punctuation">:</span>root 设置HTML文档<span class="token punctuation">:</span>empty 指定空的元素<span class="token punctuation">:</span>enabled 选择可用元素<span class="token punctuation">:</span>disabled 选择被禁用元素<span class="token punctuation">:</span>checked 选择选中的元素<span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> 选择与 &lt;selector> 不匹配的所有元素</code></pre><ul><li>属性选择器</li></ul><pre class=" language-css"><code class="language-css">[attribute*=value]：选择attribute属性值包含value的所有元素[attribute^=value]：选择attribute属性开头为value的所有元素[attribute$=value]：选择attribute属性结尾为value的所有元素</code></pre><h2 id="二、优先级"><a href="#二、优先级" class="headerlink" title="二、优先级"></a>二、优先级</h2><p>相信大家对<code>CSS</code>选择器的优先级都不陌生：</p><blockquote><p>！important&gt;内联选择器&gt;ID选择器&gt;类别选择器&gt;属性选择器&gt;伪类&gt;元素选择器&gt;通配符选择器&gt;继承选择器 </p></blockquote><p>1.！important     优先级10000<br>2.内联选择器      优先级1000<br>3.ID选择器        优先级100<br>4.类别选择器      优先级10<br>5.属性选择器      优先级10<br>6.伪类            优先级10<br>7.元素选择器      优先级1<br>8.通配符选择器    优先级0<br>9.继承选择器      没有优先级</p><p>当权值相等时，后定义的样式表要优于先定义的样式表。<br>在同一组属性设置中表有**“!important”**规则的优先级最大。<br>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 A = 1, 否则 A = 0</li><li>B的值等于 ID选择器出现的次数</li><li>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数</li></ul><p>这里举个例子：</p><pre class=" language-css"><code class="language-css">#nav-global > ul > li > a<span class="token number">.</span>nav-link</code></pre><p>套用上面的算法，依次求出 <code>A</code> <code>B</code> <code>C</code> <code>D</code> 的值：</p><ul><li>因为没有内联样式 ，所以 A = 0</li><li>ID选择器总共出现了1次， B = 1</li><li>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1</li><li>标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3</li></ul><p>上面算出的<code>A</code> 、 <code>B</code>、<code>C</code>、<code>D</code> 可以简记作：<code>(0, 1, 1, 3)</code></p><p>知道了优先级是如何计算之后，就来看看比较规则：</p><ul><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的</li></ul><p>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p><h2 id="三、继承属性"><a href="#三、继承属性" class="headerlink" title="三、继承属性"></a>三、继承属性</h2><p>在<code>css</code>中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性</p><p>关于继承属性，可以分成：</p><ul><li>字体系列属性</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">font</span><span class="token punctuation">:</span>组合字体<span class="token property">font-family</span><span class="token punctuation">:</span>规定元素的字体系列<span class="token property">font-weight</span><span class="token punctuation">:</span>设置字体的粗细<span class="token property">font-size</span><span class="token punctuation">:</span>设置字体的尺寸<span class="token property">font-style</span><span class="token punctuation">:</span>定义字体的风格<span class="token property">font-variant</span><span class="token punctuation">:</span>偏大或偏小的字体</code></pre><ul><li>文本系列属性</li></ul><pre class=" language-css"><code class="language-css">text-indent：文本缩进text-align：文本水平对刘line-height：行高word-spacing：增加或减少单词间的空白letter-spacing：增加或减少字符间的空白text-transform：控制文本大小写direction：规定文本的书写方向color：文本颜色</code></pre><ul><li>元素可见性</li></ul><pre class=" language-css"><code class="language-css">visibility</code></pre><ul><li>表格布局属性</li></ul><pre class=" language-css"><code class="language-css">caption-side：定位表格标题位置border-collapse：合并表格边框border-spacing：设置相邻单元格的边框间的距离empty-cells：单元格的边框的出现与消失table-layout：表格的宽度由什么决定</code></pre><ul><li>列表属性</li></ul><pre class=" language-css"><code class="language-css">list-style-type：文字前面的小点点样式list-style-position：小点点位置list-style：以上的属性可通过这属性集合</code></pre><ul><li>引用</li></ul><pre class=" language-css"><code class="language-css">quotes：设置嵌套引用的引号类型</code></pre><ul><li>光标属性</li></ul><pre class=" language-css"><code class="language-css">cursor：箭头可以变成需要的形状</code></pre><p>继承中比较特殊的几点：</p><ul><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的</li></ul><h2 id="四、无继承的属性"><a href="#四、无继承的属性" class="headerlink" title="四、无继承的属性"></a>四、无继承的属性</h2><ul><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3组件间传值</title>
      <link href="/2022/09/20/vue/vue3-zu-jian-jian-chuan-zhi/"/>
      <url>/2022/09/20/vue/vue3-zu-jian-jian-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="vue3中组件传值的方法"><a href="#vue3中组件传值的方法" class="headerlink" title="vue3中组件传值的方法"></a>vue3中组件传值的方法</h2><ul><li>props</li><li>emit</li><li>v-model</li><li>refs</li><li>provide/inject</li><li>eventBus</li><li>vuex</li><li>pinia</li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>Props方式是Vue中最常见的一种父传子的一种方式</p><p>子组件只需要对父组件传递的值进行渲染即可</p><p>父组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-components</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-components</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ChildComponents <span class="token keyword">from</span> <span class="token string">'../components/propsChild.vue'</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span><span class="token string">'props'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add 触发后的事件处理函数</span><span class="token keyword">const</span> handleAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>子组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in props.list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ i }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>emit方式也是Vue中最常见的组件通信方式，该方式用于子传父</p><p>在父组件中只需要监听子组件自定义的事件，然后执行对应的添加操作</p><p>父组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ i }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-components</span> <span class="token attr-name">@add</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-components</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ChildComponents <span class="token keyword">from</span> <span class="token string">'../components/emitChild.vue'</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span><span class="token string">"emit"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add 触发后的事件处理函数</span><span class="token keyword">const</span> handleAdd <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>子组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSubmit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> defineEmits <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 在子组件中点击【添加】按钮后，emit一个自定义事件，并将添加的值作为参数传递。 --></span></code></pre><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model是Vue中一个比较出色的语法糖</p><p>在子组件中我们首先定义props和emits，然后添加完成之后emit指定事件。</p><p>注：update:* 是Vue中的固定写法，*表示props中的某个属性名。</p><p>父组件中的代码</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- &lt;ChildComponent v-model:title="pageTitle" /> --></span>    <span class="token comment" spellcheck="true">&lt;!-- // 就是下面这段代码的简写形势 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;ChildComponent :title="pageTitle" @update:title="pageTitle = $event" /> --></span><span class="token comment" spellcheck="true">&lt;!-- 父组件中使用就比较简单，代码如下： --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ i }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 子组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-components</span> <span class="token attr-name"><span class="token namespace">v-model:</span>list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-components</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ChildComponents <span class="token keyword">from</span> <span class="token string">'../components/v-modelChild.vue'</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>子组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> defineEmits<span class="token punctuation">,</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 添加操作</span><span class="token keyword">const</span> handleAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> props<span class="token punctuation">.</span>list    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:list'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>    value<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>在使用选项式API时，我们可以通过this.$refs.name的方式获取指定元素或者组件，但是组合式API中就无法使用哪种方式获取。如果我们想要通过ref的方式获取组件或者元素，需要定义一个同名的Ref对象，在组件挂载后就可以访问了。</p><p>父组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in childRefs?.list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{ i }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 子组件 ref的值与&lt;script>中的保持一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-components</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>childRefs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-components</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ChildComponents <span class="token keyword">from</span> <span class="token string">'../components/refsChild.vue'</span><span class="token keyword">const</span> childRefs <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>子组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> defineExpose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span><span class="token string">'refs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add 触发后的事件处理函数</span><span class="token keyword">const</span> handleAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h3><p>provide和inject是Vue中提供的一对API，该API可以实现父组件向子组件传递数据，无论层级有多深，都可以通过这对API实现。</p><p>使用provide进行数据传递时，尽量readonly进行数据包装，避免子组件修改父级传递过去的数据。</p><p>父组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 子组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-components</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-components</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ChildComponents <span class="token keyword">from</span> <span class="token string">'./child.vue'</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> a<span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 向子组件提供数据</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add 触发后的事件处理函数</span><span class="token keyword">const</span> handleAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>后代组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ i }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 接受父组件提供的数据</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h3><p>Vue3中移除了事件总线，但是可以借助于第三方工具来完成，Vue官方推荐mitt[2]或tiny-emitter[3]</p><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>通过<code>vuex</code>可方便各个组件间信息传递，<code>vuex</code>类似react中的redux。</p><p>全局维护一个对象，该对象是一个状态<code>store</code>树，包含 <code>state</code> 与<code>操作</code>。所有组件之间实现交互时，不需要直接交互，而是分别对维护的全局state进行交互即可。</p><p>store/index.js中的代码</p><pre class=" language-html"><code class="language-html">import { createStore } from 'vuex'export default createStore({  state: {    info: 'hello'  },  mutations: {    // 定义mutations，用于修改状态(同步)    updateInfo (state, payload) {      state.info = payload    }  },  actions: {    // 定义actions，用于修改状态(异步)    // 2秒后更新状态    updateInfo (context, payload) {      setTimeout(() => {        context.commit('updateInfo', payload)      }, 2000)    }  },  getters: {    // 定义一个getters    formatInfo (state) {      return state.info + ' Tom'    }  },  modules: {  }})</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// 类似 Redux 中的建立状态树</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、 存储所有全局数据</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 2、 需要通过计算获取state里的内容获取的数据</span>  <span class="token comment" spellcheck="true">// 只能读取不可修改</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//  3、定义对state的各种操作</span>  <span class="token comment" spellcheck="true">// why不直接实现在mutation里需要写到action里?</span>  <span class="token comment" spellcheck="true">// mtations不能执行异步操作。aq:从云端获取信息-->(等待云端反馈)更新到state异步操作</span>  <span class="token comment" spellcheck="true">// 因此说:对于异步操作需要放到action里，简单的直接赋值操作可以直接放到mutation里</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updataUser</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 3、定义对state的各种操作</span>  <span class="token comment" spellcheck="true">// actions无法直接修改state，需要在mutations里更新</span>  <span class="token comment" spellcheck="true">// mutation不支持异步，所以需要在action里写api到url</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 比说action定义了更新state的操作</span>      <span class="token comment" spellcheck="true">// 但是不可对其直接修改</span>      <span class="token comment" spellcheck="true">// 所有的修改操作必须放到mutations里</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// state中信息过长时</span>  <span class="token comment" spellcheck="true">// 用来将state进行分割</span>  <span class="token comment" spellcheck="true">// 如下，将state树分割出一个user state。</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> ModuleUser<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>state中信息过长时，<code>modules</code> 用来将<code>state</code>进行分割。<br>如下，将 <code>state </code>树分割出一个<code>user</code> state。同样的user下也有这几部分内容：<code>state、getters、mutation、actions、modules</code>。在新建的<code>user. js</code>文件中写入如下代码:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// user. js</span><span class="token keyword">const</span> ModuleUser <span class="token operator">=</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> <span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>     username<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>     photo<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateUser</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>     state<span class="token punctuation">.</span>id <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>     state<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> modules<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ModuleUser<span class="token punctuation">;</span></code></pre><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>组件中的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>测试组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面中直接使用渲染时与vue2中的使用方法相同 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>获取Store中的state、getters: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{$store.getters.formatInfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleClick<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 按需引入useStore()方法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// this.$store.state.info</span><span class="token comment" spellcheck="true">// Vue3中store类似于Vue2中this.$store</span><span class="token comment" spellcheck="true">// useStore()方法创建store对象，相当于src/store/index.js中的store实例对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>info<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello</span><span class="token comment" spellcheck="true">// 修改info的值</span><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 触发mutations，用于同步修改state的信息</span>    <span class="token comment" spellcheck="true">// store.commit('updateInfo', 'nihao')</span>    <span class="token comment" spellcheck="true">// 触发actions，用于异步修改state的信息</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateInfo'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0f0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="vuex-应用"><a href="#vuex-应用" class="headerlink" title="vuex 应用"></a>vuex 应用</h4><p>全局存储用户信息，通过vuex维护实现登录功能与用户信息的访问。<br>登录操作时，如何向服务器验证。</p><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>Pinia是Vue.js的轻量级状态管理库,比起vue3中的Vuex状态管理,pinia更轻量,更容易使用</p><p>Vuex 与 Pinia 对比</p><ul><li>Vuex 中核心部分： State、Getters、Mutations（同步） 和 Actions（异步）</li><li>Pinia 中核心部分： State、Getters 和 Actions(同步异步均支持)</li></ul><p>Pinia 各部分作用</p><ul><li>State： 类似于组件中data，用于存储全局状态</li><li>Getters： 类似于组件中的computed，根据已有的State封装派生数据，也具有缓存的特性</li><li>Actions： 类似于组件中的methods，用于封装业务逻辑，同步异步均可以</li></ul><p>stores/index.js中的代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"@/store/store.js"</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>todoScore.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span> <span class="token keyword">export</span> <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** @type {{ text: string, id: number, isFinished: boolean }[]} */</span>    todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** @type {'all' | 'finished' | 'unfinished'} */</span>    filter<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// type 会自动推断为 number</span>    nextId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">finishedTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自动完成! ✨</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">unfinishedTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * @returns {{ text: string, id: number, isFinished: boolean }[]}     */</span>    <span class="token function">filteredTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">'finished'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自动调用其他 getter ✨</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>finishedTodos      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">'unfinished'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unfinishedTodos      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 任何数量的参数，返回一个 Promise 或者不返回</span>    <span class="token function">addTodo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 你可以直接改变状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span> isFinished<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p> 在组件中使用</p><p>为了从 Store 中提取属性同时保持其响应式，您需要使用storeToRefs()。 它将为任何响应式属性创建 refs。</p><p>在vue3的setup中，ref接受一个内部值，返回一个响应式的、可更改的 ref 对象，此对象只有一个指向其内部值的属性 .value。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // code  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> Toast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> todoStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/todoStore"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// state</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> todos<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> nextId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>chatStore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// actions</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> finishedTodos<span class="token punctuation">,</span> unfinishedTodos <span class="token punctuation">}</span> <span class="token operator">=</span> chatStore<span class="token punctuation">;</span>   <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> playStatus <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> customFieldName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> nowMusicIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> musicList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token keyword">const</span> audioObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span>musicList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  audioObj<span class="token punctuation">.</span>autoplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  audioObj<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> vanPickerObj <span class="token operator">=</span> <span class="token keyword">null</span>   audioObj<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token string">'音频资源加载出错了～'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>playIntervalId<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置时间选择组件对象</span>  <span class="token keyword">const</span> setVanPicker <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    vanPickerObj <span class="token operator">=</span> el<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">const</span> showActionSheet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    show<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> stopMusic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    playStatus<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>   <span class="token keyword">const</span> handleBackClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  // code</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型的理解</title>
      <link href="/2018/09/30/css/he-zi-mo-xing-de-li-jie/"/>
      <url>/2018/09/30/css/he-zi-mo-xing-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）</p><p>一个盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p><p><img src="https://static.vue-js.com/976789a0-8f9b-11eb-85f6-6fac77c0c9b3.png" alt="img"></p><p><code>content</code>，即实际内容，显示文本和图像</p><p><code>boreder</code>，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成</p><p><code>padding</code>，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的<code>background</code>属性影响</p><p><code>margin</code>，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域</p><h2 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h2><p>在<code>CSS</code>中，盒子模型可以分成：</p><ul><li>W3C 标准盒子模型</li><li>IE 怪异盒子模型</li></ul><p>默认情况下，盒子模型为<code>W3C</code> 标准盒子模型</p><h2 id="三、标准盒子模型"><a href="#三、标准盒子模型" class="headerlink" title="三、标准盒子模型"></a>三、标准盒子模型</h2><p>标准盒子模型，是浏览器默认的盒子模型</p><ul><li>盒子总宽度 = width + padding + border + margin;</li><li>盒子总高度 = height + padding + border + margin</li></ul><p>也就是，<code>width/height</code> 只是内容高度，不包含 <code>padding</code> 和 <code>border</code>值</p><h2 id="四、IE-怪异盒子模型"><a href="#四、IE-怪异盒子模型" class="headerlink" title="四、IE 怪异盒子模型"></a>四、IE 怪异盒子模型</h2><ul><li>盒子总宽度 = width + margin;</li><li>盒子总高度 = height + margin;</li></ul><p>也就是，<code>width/height</code> 包含了 <code>padding</code>和 <code>border</code>值</p><h2 id="五、Box-sizing"><a href="#五、Box-sizing" class="headerlink" title="五、Box-sizing"></a>五、Box-sizing</h2><p>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度</p><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box|border-box|inherit</code></pre><ul><li>content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</li><li>border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致</li><li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
